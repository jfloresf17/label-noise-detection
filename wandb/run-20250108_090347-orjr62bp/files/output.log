Traceback (most recent call last):
  File "/home/tidop/projects/Noisy-Student/train_teacher.py", line 276, in <module>
    typer.run(train_teacher)
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/typer/main.py", line 1080, in run
    app()
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/typer/main.py", line 338, in __call__
    raise e
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/typer/main.py", line 321, in __call__
    return get_command(self)(*args, **kwargs)
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/click/core.py", line 1157, in __call__
    return self.main(*args, **kwargs)
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/typer/core.py", line 665, in main
    return _main(
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/typer/core.py", line 197, in _main
    rv = self.invoke(ctx)
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/click/core.py", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/typer/main.py", line 703, in wrapper
    return callback(**use_params)
  File "/home/tidop/projects/Noisy-Student/train_teacher.py", line 70, in train_teacher
    train_loader = whu_module.train_dataloader()
  File "/home/tidop/projects/Noisy-Student/dataloader.py", line 120, in train_dataloader
    return DataLoader(self.train_dataset,
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 376, in __init__
    sampler = RandomSampler(dataset, generator=generator)  # type: ignore[arg-type]
  File "/home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/torch/utils/data/sampler.py", line 164, in __init__
    raise ValueError(
ValueError: num_samples should be a positive integer value, but got num_samples=0
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/tidop/projects/Noisy-Student/train_teacher.py:70 in train_teacher      │
│                                                                              │
│    67 │   │   │   │   │   │   │   │   │   batch_size=batch_size, num_workers │
│    68 │   whu_module.setup(stage='fit')                                      │
│    69 │                                                                      │
│ ❱  70 │   train_loader = whu_module.train_dataloader()                       │
│    71 │   val_loader = whu_module.val_dataloader()                           │
│    72 │                                                                      │
│    73 │   # alabama_module = BuildingDataModule(alabama_path, "Alabama", nor │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │       alpha = 0.01                                                       │ │
│ │  batch_size = 16                                                         │ │
│ │        beta = 1                                                          │ │
│ │      config = {                                                          │ │
│ │               │   'device': 'cuda',                                      │ │
│ │               │   'learning_rate': '1e-4',                               │ │
│ │               │   'data': {                                              │ │
│ │               │   │   'batch_size': 16,                                  │ │
│ │               │   │   'num_workers': 16,                                 │ │
│ │               │   │   'whu_path':                                        │ │
│ │               '/media/tidop/Datos_4TB1/databases/whu_adjusted',          │ │
│ │               │   │   'alabama_path':                                    │ │
│ │               '/media/tidop/Datos_4TB1/databases/alabama',               │ │
│ │               │   │   'datacentric_image_path':                          │ │
│ │               '/media/tidop/Datos_4TB1/databases/kaggle/dataset/trainin… │ │
│ │               │   │   'label_noisy_path':                                │ │
│ │               '/media/tidop/Datos_4TB1/databases/kaggle/dataset/trainin… │ │
│ │               │   },                                                     │ │
│ │               │   'Normalize': {                                         │ │
│ │               │   │   'apply': True,                                     │ │
│ │               │   │   'WHU': {                                           │ │
│ │               │   │   │   'mean': [                                      │ │
│ │               │   │   │   │   72.62323902,                               │ │
│ │               │   │   │   │   99.33869521,                               │ │
│ │               │   │   │   │   82.94464024                                │ │
│ │               │   │   │   ],                                             │ │
│ │               │   │   │   'std': [                                       │ │
│ │               │   │   │   │   43.81751311,                               │ │
│ │               │   │   │   │   42.46326449,                               │ │
│ │               │   │   │   │   50.62061044                                │ │
│ │               │   │   │   ]                                              │ │
│ │               │   │   },                                                 │ │
│ │               │   │   'Alabama': {                                       │ │
│ │               │   │   │   'mean': [                                      │ │
│ │               │   │   │   │   83.00301721,                               │ │
│ │               │   │   │   │   91.24630964,                               │ │
│ │               │   │   │   │   87.26586959                                │ │
│ │               │   │   │   ],                                             │ │
│ │               │   │   │   'std': [                                       │ │
│ │               │   │   │   │   33.38048494,                               │ │
│ │               │   │   │   │   36.60072106,                               │ │
│ │               │   │   │   │   41.38057245                                │ │
│ │               │   │   │   ]                                              │ │
│ │               │   │   },                                                 │ │
│ │               │   │   'WHU + Alabama': {                                 │ │
│ │               │   │   │   'mean': [                                      │ │
│ │               │   │   │   │   94.21397367,                               │ │
│ │               │   │   │   │   102.78712076,                              │ │
│ │               │   │   │   │   99.94002467                                │ │
│ │               │   │   │   ],                                             │ │
│ │               │   │   │   'std': [                                       │ │
│ │               │   │   │   │   40.95295341,                               │ │
│ │               │   │   │   │   41.52023864,                               │ │
│ │               │   │   │   │   45.4620858                                 │ │
│ │               │   │   │   ]                                              │ │
│ │               │   │   },                                                 │ │
│ │               │   │   'DataCentric': {                                   │ │
│ │               │   │   │   'mean': [                                      │ │
│ │               │   │   │   │   72.74413315,                               │ │
│ │               │   │   │   │   99.76137101,                               │ │
│ │               │   │   │   │   82.70024275                                │ │
│ │               │   │   │   ],                                             │ │
│ │               │   │   │   'std': [                                       │ │
│ │               │   │   │   │   36.28290664,                               │ │
│ │               │   │   │   │   34.82507359,                               │ │
│ │               │   │   │   │   41.48902725                                │ │
│ │               │   │   │   ]                                              │ │
│ │               │   │   }                                                  │ │
│ │               │   },                                                     │ │
│ │               │   'loss': {'alpha': 0.01, 'beta': 1},                    │ │
│ │               │   'trainer': {                                           │ │
│ │               │   │   'wandb_project': 'Unet-NRN-RSSEG',                 │ │
│ │               │   │   'experiment_name': 'Unet-WHU-Kaggle',              │ │
│ │               │   │   'max_epochs': 50                                   │ │
│ │               │   }                                                      │ │
│ │               }                                                          │ │
│ │ config_path = 'config.yaml'                                              │ │
│ │      device = 'cuda'                                                     │ │
│ │      epochs = 50                                                         │ │
│ │ input_paths = '/media/tidop/Datos_4TB1/databases/kaggle/dataset/trainin… │ │
│ │ label_paths = '/media/tidop/Datos_4TB1/databases/kaggle/dataset/trainin… │ │
│ │          lr = 0.0001                                                     │ │
│ │        mean = [72.74413315, 99.76137101, 82.70024275]                    │ │
│ │   normalize = True                                                       │ │
│ │ num_workers = 16                                                         │ │
│ │   optimizer = Adam (                                                     │ │
│ │               Parameter Group 0                                          │ │
│ │               │   amsgrad: False                                         │ │
│ │               │   betas: (0.9, 0.999)                                    │ │
│ │               │   capturable: False                                      │ │
│ │               │   differentiable: False                                  │ │
│ │               │   eps: 1e-08                                             │ │
│ │               │   foreach: None                                          │ │
│ │               │   fused: None                                            │ │
│ │               │   lr: 0.0001                                             │ │
│ │               │   maximize: False                                        │ │
│ │               │   weight_decay: 0                                        │ │
│ │               )                                                          │ │
│ │   scheduler = <torch.optim.lr_scheduler.ReduceLROnPlateau object at      │ │
│ │               0x76306c5b3520>                                            │ │
│ │         std = [36.28290664, 34.82507359, 41.48902725]                    │ │
│ │     teacher = ResUnetTeacher(                                            │ │
│ │                 (inc): DoubleConv(                                       │ │
│ │               │   (conv): Sequential(                                    │ │
│ │               │     (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1,    │ │
│ │               1), padding=(1, 1), bias=False)                            │ │
│ │               │     (1): BatchNorm2d(64, eps=1e-05, momentum=0.1,        │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │     (2): ReLU(inplace=True)                              │ │
│ │               │     (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1,   │ │
│ │               1), padding=(1, 1), bias=False)                            │ │
│ │               │     (4): BatchNorm2d(64, eps=1e-05, momentum=0.1,        │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │     (5): ReLU(inplace=True)                              │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (down1): Down(                                           │ │
│ │               │   (pool): MaxPool2d(kernel_size=2, stride=2, padding=0,  │ │
│ │               dilation=1, ceil_mode=False)                               │ │
│ │               │   (conv): DoubleConv(                                    │ │
│ │               │     (conv): Sequential(                                  │ │
│ │               │   │   (0): Conv2d(64, 128, kernel_size=(3, 3),           │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (1): BatchNorm2d(128, eps=1e-05, momentum=0.1,     │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (2): ReLU(inplace=True)                            │ │
│ │               │   │   (3): Conv2d(128, 128, kernel_size=(3, 3),          │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (4): BatchNorm2d(128, eps=1e-05, momentum=0.1,     │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (5): ReLU(inplace=True)                            │ │
│ │               │     )                                                    │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (down2): Down(                                           │ │
│ │               │   (pool): MaxPool2d(kernel_size=2, stride=2, padding=0,  │ │
│ │               dilation=1, ceil_mode=False)                               │ │
│ │               │   (conv): DoubleConv(                                    │ │
│ │               │     (conv): Sequential(                                  │ │
│ │               │   │   (0): Conv2d(128, 256, kernel_size=(3, 3),          │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (1): BatchNorm2d(256, eps=1e-05, momentum=0.1,     │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (2): ReLU(inplace=True)                            │ │
│ │               │   │   (3): Conv2d(256, 256, kernel_size=(3, 3),          │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (4): BatchNorm2d(256, eps=1e-05, momentum=0.1,     │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (5): ReLU(inplace=True)                            │ │
│ │               │     )                                                    │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (up1): Up(                                               │ │
│ │               │   (up): ConvTranspose2d(256, 128, kernel_size=(2, 2),    │ │
│ │               stride=(2, 2))                                             │ │
│ │               │   (conv): DoubleConv(                                    │ │
│ │               │     (conv): Sequential(                                  │ │
│ │               │   │   (0): Conv2d(256, 128, kernel_size=(3, 3),          │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (1): BatchNorm2d(128, eps=1e-05, momentum=0.1,     │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (2): ReLU(inplace=True)                            │ │
│ │               │   │   (3): Conv2d(128, 128, kernel_size=(3, 3),          │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (4): BatchNorm2d(128, eps=1e-05, momentum=0.1,     │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (5): ReLU(inplace=True)                            │ │
│ │               │     )                                                    │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (att1): AttentionBlock(                                  │ │
│ │               │   (channel_attention): ChannelAttention(                 │ │
│ │               │     (avg_pool): AdaptiveAvgPool2d(output_size=1)         │ │
│ │               │     (max_pool): AdaptiveMaxPool2d(output_size=1)         │ │
│ │               │     (fc): Sequential(                                    │ │
│ │               │   │   (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, │ │
│ │               1), bias=False)                                            │ │
│ │               │   │   (1): ReLU(inplace=True)                            │ │
│ │               │   │   (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, │ │
│ │               1), bias=False)                                            │ │
│ │               │     )                                                    │ │
│ │               │     (sigmoid): Sigmoid()                                 │ │
│ │               │   )                                                      │ │
│ │               │   (spatial_attention): SpatialAttention(                 │ │
│ │               │     (avg_pool): AvgPool2d(kernel_size=7, stride=1,       │ │
│ │               padding=3)                                                 │ │
│ │               │     (max_pool): MaxPool2d(kernel_size=7, stride=1,       │ │
│ │               padding=3, dilation=1, ceil_mode=False)                    │ │
│ │               │     (conv): Conv2d(256, 1, kernel_size=(7, 7),           │ │
│ │               stride=(1, 1), padding=(3, 3), bias=False)                 │ │
│ │               │     (sigmoid): Sigmoid()                                 │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (up2): Up(                                               │ │
│ │               │   (up): ConvTranspose2d(128, 64, kernel_size=(2, 2),     │ │
│ │               stride=(2, 2))                                             │ │
│ │               │   (conv): DoubleConv(                                    │ │
│ │               │     (conv): Sequential(                                  │ │
│ │               │   │   (0): Conv2d(128, 64, kernel_size=(3, 3),           │ │
│ │               stride=(1, 1), padding=(1, 1), bias=False)                 │ │
│ │               │   │   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1,      │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (2): ReLU(inplace=True)                            │ │
│ │               │   │   (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, │ │
│ │               1), padding=(1, 1), bias=False)                            │ │
│ │               │   │   (4): BatchNorm2d(64, eps=1e-05, momentum=0.1,      │ │
│ │               affine=True, track_running_stats=True)                     │ │
│ │               │   │   (5): ReLU(inplace=True)                            │ │
│ │               │     )                                                    │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (att2): AttentionBlock(                                  │ │
│ │               │   (channel_attention): ChannelAttention(                 │ │
│ │               │     (avg_pool): AdaptiveAvgPool2d(output_size=1)         │ │
│ │               │     (max_pool): AdaptiveMaxPool2d(output_size=1)         │ │
│ │               │     (fc): Sequential(                                    │ │
│ │               │   │   (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1,  │ │
│ │               1), bias=False)                                            │ │
│ │               │   │   (1): ReLU(inplace=True)                            │ │
│ │               │   │   (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1,  │ │
│ │               1), bias=False)                                            │ │
│ │               │     )                                                    │ │
│ │               │     (sigmoid): Sigmoid()                                 │ │
│ │               │   )                                                      │ │
│ │               │   (spatial_attention): SpatialAttention(                 │ │
│ │               │     (avg_pool): AvgPool2d(kernel_size=7, stride=1,       │ │
│ │               padding=3)                                                 │ │
│ │               │     (max_pool): MaxPool2d(kernel_size=7, stride=1,       │ │
│ │               padding=3, dilation=1, ceil_mode=False)                    │ │
│ │               │     (conv): Conv2d(128, 1, kernel_size=(7, 7),           │ │
│ │               stride=(1, 1), padding=(3, 3), bias=False)                 │ │
│ │               │     (sigmoid): Sigmoid()                                 │ │
│ │               │   )                                                      │ │
│ │                 )                                                        │ │
│ │                 (outc): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1)) │ │
│ │               )                                                          │ │
│ │    whu_mean = [72.62323902, 99.33869521, 82.94464024]                    │ │
│ │  whu_module = <dataloader.BuildingDataModule object at 0x76306c513430>   │ │
│ │    whu_path = '/media/tidop/Datos_4TB1/databases/whu_adjusted'           │ │
│ │     whu_std = [43.81751311, 42.46326449, 50.62061044]                    │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /home/tidop/projects/Noisy-Student/dataloader.py:120 in train_dataloader     │
│                                                                              │
│   117 │   │   │   │   │   │   │   │   │   │   │      std=self.std)           │
│   118 │                                                                      │
│   119 │   def train_dataloader(self):                                        │
│ ❱ 120 │   │   return DataLoader(self.train_dataset,                          │
│   121 │   │   │   │   │   │     batch_size=self.batch_size,                  │
│   122 │   │   │   │   │   │     num_workers=self.num_workers,                │
│   123 │   │   │   │   │   │     shuffle=True)                                │
│                                                                              │
│ ╭──────────────────────────── locals ─────────────────────────────╮          │
│ │ self = <dataloader.BuildingDataModule object at 0x76306c513430> │          │
│ ╰─────────────────────────────────────────────────────────────────╯          │
│                                                                              │
│ /home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/tor │
│ ch/utils/data/dataloader.py:376 in __init__                                  │
│                                                                              │
│    373 │   │   │   │   sampler = _InfiniteConstantSampler()                  │
│    374 │   │   │   else:  # map-style                                        │
│    375 │   │   │   │   if shuffle:                                           │
│ ❱  376 │   │   │   │   │   sampler = RandomSampler(dataset, generator=genera │
│    377 │   │   │   │   else:                                                 │
│    378 │   │   │   │   │   sampler = SequentialSampler(dataset)  # type: ign │
│    379                                                                       │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │           batch_sampler = None                                           │ │
│ │              batch_size = 16                                             │ │
│ │              collate_fn = None                                           │ │
│ │                 dataset = <dataloader.TeacherDataset object at           │ │
│ │                           0x76306c5c9720>                                │ │
│ │               drop_last = False                                          │ │
│ │               generator = None                                           │ │
│ │ multiprocessing_context = None                                           │ │
│ │             num_workers = 16                                             │ │
│ │      persistent_workers = False                                          │ │
│ │              pin_memory = False                                          │ │
│ │       pin_memory_device = ''                                             │ │
│ │         prefetch_factor = 2                                              │ │
│ │                 sampler = None                                           │ │
│ │                    self = <torch.utils.data.dataloader.DataLoader object │ │
│ │                           at 0x76306c5c9a20>                             │ │
│ │                 shuffle = True                                           │ │
│ │                 timeout = 0                                              │ │
│ │          worker_init_fn = None                                           │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /home/tidop/Documentos/miniconda3/envs/deep/lib/python3.10/site-packages/tor │
│ ch/utils/data/sampler.py:164 in __init__                                     │
│                                                                              │
│   161 │   │   │   )                                                          │
│   162 │   │                                                                  │
│   163 │   │   if not isinstance(self.num_samples, int) or self.num_samples < │
│ ❱ 164 │   │   │   raise ValueError(                                          │
│   165 │   │   │   │   f"num_samples should be a positive integer value, but  │
│   166 │   │   │   )                                                          │
│   167                                                                        │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │ data_source = <dataloader.TeacherDataset object at 0x76306c5c9720>       │ │
│ │   generator = None                                                       │ │
│ │ num_samples = None                                                       │ │
│ │ replacement = False                                                      │ │
│ │        self = <torch.utils.data.sampler.RandomSampler object at          │ │
│ │               0x76306c5c9a80>                                            │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
╰──────────────────────────────────────────────────────────────────────────────╯
ValueError: num_samples should be a positive integer value, but got
num_samples=0
